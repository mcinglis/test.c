// test.h

// Copyright (C) 2013  Malcolm Inglis <http://minglis.id.au/>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.


#ifndef INCLUDED_TESTC_TEST_H
#define INCLUDED_TESTC_TEST_H


#include <stdbool.h>
#include <stdio.h>

#include <macromap.h/macromap.h> // MACROMAP, MACROMAP3

#include "assertion.h" // TestAssertion


// A test function takes a reference to some data and returns an
// allocated, terminated array of assertions.
typedef TestAssertion * ( *test_function )( void * data );


// A test is a named function that generates an array of assertions. A
// test is considered to pass if all of these assertions were true.
typedef struct Test {

    // Used for displaying and naming the results of the test.
    char const * name;

    // Returns a dynamically-allocated terminated assertion array, or
    // null if the test makes no assertions. Returning null is commonly
    // used with `TEST_REQUIRE`, or with tests that fail by prompting a
    // run-time error like a segmentation fault.
    test_function func;

    // If non-null, this is executed to generate the `data` argument to
    // pass to the test's `func` field.
    void * ( *before )( void );

    // If non-null, this is executed after calling the test's `func`,
    // and is passed the `data` generated by `before` and possibly
    // modified by `func`.
    void ( *after )( void * data );

    // Invariants:
    // - `name` is null if and only if `func` is null

} Test;


// Represents the results of running a set of tests.
typedef struct TestResults {
    int passed;
    int failed;
} TestResults;


// Evaluates to a literal `Test` with the given function expression.
#define TEST( FUNC ) { .func = FUNC, .name = #FUNC }


// Evaluates to a literal `Test` with the given function expressions.
#define TEST_FIX( BEFORE, AFTER, FUNC ) \
    { .func = FUNC, .name = #FUNC, .before = BEFORE, .after = AFTER }


// The sentinel value for the end of a tests array. These comments refer
// to test arrays containing this value as being "terminated", because
// it signals to the receiver when to stop iterating through the array.
#define TESTS_END { .func = NULL }


// Evaluates to a literal terminated array of tests corresponding to
// each of the given function expressions. Because this uses
// `MACROMAP`, it can't take more than 128 expressions, and no
// expression can begin with more than four parentheses. See
// Macromap.h's documentation for more details.
#define TESTS( ... ) \
    { MACROMAP( TESTS_EL, __VA_ARGS__ ) TESTS_END }
#define TESTS_EL( FUNC ) TEST( FUNC ),


// Similar to `TESTS`, but also takes two function expressions to set as
// the `before` and `after` fields of each of the tests. Because this
// uses `MACROMAP3`, it can't take more than 128 test function
// expressions, and no test function expression can begin with more than
// four parentheses. See Macromap.h's documentation for more details.
#define TESTS_FIX( BEFORE, AFTER, ... ) \
    { MACROMAP3( TESTS_FIX_EL, BEFORE, AFTER, __VA_ARGS__ ) \
      TESTS_END }
#define TESTS_FIX_EL( BEFORE, AFTER, FUNC ) TEST_FIX( BEFORE, AFTER, FUNC ),


// Returns true if the two tests are equal, and false if not.
bool test_eq( Test, Test );


// Returns true if the given test is equal to `TESTS_END`.
bool test_is_end( Test );


struct tests_run_options {
    char const * name;
    Test const * tests;
    FILE * file;
};

// Runs each test in the terminated `tests` array, and prints the
// results to the specified file (or to stdout if the `file` field is
// null), naming the test set with `name`.
TestResults tests_run_( struct tests_run_options );
#define tests_run( ... ) \
    tests_run_( ( struct tests_run_options ){ __VA_ARGS__ } )


// Returns `1` if any of the results in the given array have failures,
// and `0` if they don't.
int tests_return_val_( TestResults const * results );


// Takes a series of expressions that evaluate to a `TestResults` value,
// and returns `1` if any of those results contain failures, or `0` if
// they don't (i.e. if they all passed). You can return this call from
// your test's `main` to make it exit with the appropriate value.
#define tests_return_val( ... ) \
    tests_return_val_( ( TestResults[] ){ __VA_ARGS__, { .failed = -1 } } )


#endif // ifndef INCLUDED_TESTC_TEST_H

